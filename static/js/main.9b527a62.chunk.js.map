{"version":3,"sources":["hooks/useInputState.js","hooks/useLocalStorageState.js","hooks/languageContext.js","hooks/useToggleState.js","hooks/themeContext.js","nav-bar.js","todo-form.js","todo-list.js","main-content.js","App.js","serviceWorker.js","index.js"],"names":["initialValue","useState","value","setValue","evt","target","key","savedData","localStorage","getItem","JSON","parse","store","setStore","useEffect","setItem","stringify","LanguageContext","createContext","LanguageContextProvider","props","useLocalStorageState","todoLang","setTodoLang","useInputState","lang","setLang","Provider","changeLang","children","useToggleState","toggleValue","ThemeContext","ThemeContextProvider","todoDarkMode","setTodoDarkMode","isDarkTheme","toggleIsDarkTheme","toggleTheme","useStyles","makeStyles","theme","title","flexGrow","textAlign","whiteSpace","textTransform","toggleLabel","minWidth","breakpoints","down","display","formLabel","marginRight","formControl","marginLeft","lightLabel","color","darkLabel","languageData","english","todoListText","lightText","darkText","french","german","NavBar","classes","useContext","labelClass","Box","bgcolor","AppBar","position","Toolbar","FormControlLabel","control","Switch","checked","onChange","name","label","root","Typography","variant","className","FormControl","Select","icon","disableUnderline","MenuItem","alignItems","margin","justifyContent","selectedTodo","todoLabelText","addTodoText","saveTodoText","TodoForm","initialVal","text","todoText","setTodoText","clearTodoText","noValidate","autoComplete","onSubmit","preventDefault","todoItem","handleSave","TextField","autoFocus","component","ml","Button","type","disabled","overflow","textOverflow","TodoList","setSelectedTodo","item","List","style","flex","minHeight","todos","map","Fragment","id","ListItem","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","completed","handleCheckChange","ListItemText","primary","textDecoration","IconButton","onClick","handleDelete","Divider","boxSizing","MainContent","todoList","setTodoList","todo","uuid","paddingX","paddingY","Paper","paddingBottom","length","updatedList","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9b527a62.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nexport default initialValue => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const valueChange = evt => {\r\n        setValue(evt.target.value);\r\n    };\r\n    const valueClear = () => {\r\n        setValue('');\r\n    };\r\n    return [value, valueChange, valueClear];\r\n};","import { useState, useEffect } from 'react';\r\n\r\nexport default (key, initialValue) => {\r\n    const [store, setStore] = useState(() => {\r\n        const savedData = localStorage.getItem(key);\r\n        return savedData ? JSON.parse(savedData) : initialValue;\r\n    });\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(store));\r\n    }, [key, store]);\r\n    return [store, setStore];\r\n};","import React, { createContext } from 'react';\r\nimport useInputState from './useInputState';\r\nimport useLocalStorageState from './useLocalStorageState';\r\n\r\nconst LanguageContext = createContext();\r\n\r\nfunction LanguageContextProvider(props) {\r\n    const [todoLang, setTodoLang] = useLocalStorageState('todo-lang', 'english');\r\n    const [lang, setLang] = useInputState(todoLang);\r\n    const changeLang = (evt) => {\r\n        setTodoLang(evt.target.value);\r\n        setLang(evt);\r\n    };\r\n    return (\r\n        <LanguageContext.Provider value={{ lang, changeLang }}>\r\n            {props.children}\r\n        </LanguageContext.Provider>\r\n    );\r\n}\r\n\r\nexport { LanguageContextProvider, LanguageContext };","import { useState } from 'react';\r\n\r\nconst useToggleState = (initialValue = false) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const toggleValue = () => {\r\n        setValue(!value);\r\n    };\r\n    return [value, toggleValue];\r\n};\r\n\r\nexport default useToggleState;","import React, { createContext } from 'react';\r\nimport useToggleState from './useToggleState';\r\nimport useLocalStorageState from './useLocalStorageState';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction ThemeContextProvider(props) {\r\n    const [todoDarkMode, setTodoDarkMode] = useLocalStorageState('todo-theme', false);\r\n    const [isDarkTheme, toggleIsDarkTheme] = useToggleState(todoDarkMode);\r\n    const toggleTheme = () => {\r\n        setTodoDarkMode(!isDarkTheme);\r\n        toggleIsDarkTheme();\r\n    };\r\n    return (\r\n        <ThemeContext.Provider value={{ isDarkTheme, toggleTheme }}>\r\n            {props.children}\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\nexport { ThemeContextProvider, ThemeContext };","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { LanguageContext } from './hooks/languageContext';\r\nimport { ThemeContext } from './hooks/themeContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        flexGrow: 1,\r\n        textAlign: 'center',\r\n        whiteSpace: 'nowrap',\r\n        textTransform: 'uppercase'\r\n    },\r\n    toggleLabel: {\r\n        minWidth: '6rem',\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'none'\r\n        }\r\n    },\r\n    formLabel: {\r\n        marginRight: 0\r\n    },\r\n    formControl: {\r\n        minWidth: 85,\r\n        marginLeft: '0.5rem'\r\n    },\r\n    lightLabel: {\r\n        color: 'white'\r\n    },\r\n    darkLabel: {\r\n        color: 'black'\r\n    }\r\n}));\r\n\r\nconst languageData = {\r\n    english: {\r\n        todoListText: 'Todo List',\r\n        lightText: 'Light',\r\n        darkText: 'Dark'\r\n    },\r\n    french: {\r\n        todoListText: 'Lista de quehaceres',\r\n        lightText: 'Lumière',\r\n        darkText: 'Sombre'\r\n    },\r\n    german: {\r\n        todoListText: 'Aufgabenliste',\r\n        lightText: 'Licht',\r\n        darkText: 'Dunkel'\r\n    }\r\n};\r\n\r\nfunction NavBar() {\r\n    const classes = useStyles();\r\n    const { lang, changeLang } = useContext(LanguageContext);\r\n    const { isDarkTheme, toggleTheme } = useContext(ThemeContext);\r\n    const { todoListText, lightText, darkText } = languageData[lang];\r\n    const labelClass = isDarkTheme ? classes.lightLabel : classes.darkLabel;\r\n    return (\r\n        <Box bgcolor={isDarkTheme ? 'text.secondary' : 'white'}>\r\n            <AppBar position='static' color='transparent'>\r\n                <Toolbar>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={isDarkTheme} onChange={toggleTheme} name='themeToggle' />}\r\n                        label={isDarkTheme ? darkText : lightText}\r\n                        classes={{ root: classes.formLabel, label: classes.toggleLabel + ' ' + labelClass }}\r\n                    />\r\n                    <Typography variant='h6' className={classes.title + ' ' + labelClass}>\r\n                        {todoListText}\r\n                    </Typography>\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select\r\n                            value={lang}\r\n                            onChange={changeLang}\r\n                            classes={{ root: labelClass, icon: labelClass }}\r\n                            disableUnderline\r\n                        >\r\n                            <MenuItem value='english'>English</MenuItem>\r\n                            <MenuItem value='french'>French</MenuItem>\r\n                            <MenuItem value='german'>German</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { useContext } from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useInputState from './hooks/useInputState';\r\nimport { LanguageContext } from './hooks/languageContext';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        margin: '0.5rem 1rem',\r\n        justifyContent: props => props.selectedTodo ? 'initial' : 'center'\r\n    }\r\n});\r\n\r\nconst languageData = {\r\n    english: {\r\n        todoLabelText: 'Todo',\r\n        addTodoText: 'Add Todo',\r\n        saveTodoText: 'Save'\r\n    },\r\n    french: {\r\n        todoLabelText: 'Faire',\r\n        addTodoText: 'Ajouter Todo',\r\n        saveTodoText: 'Sauvegarder'\r\n    },\r\n    german: {\r\n        todoLabelText: 'Machen',\r\n        addTodoText: 'Fügen Sie Todo hinzu',\r\n        saveTodoText: 'Speichern'\r\n    }\r\n};\r\n\r\nfunction TodoForm(props) {\r\n    const classes = useStyles(props);\r\n    const { lang } = useContext(LanguageContext);\r\n    const initialVal = props.selectedTodo?.text || '';\r\n    const [todoText, setTodoText, clearTodoText] = useInputState(initialVal);\r\n    const { todoLabelText, addTodoText, saveTodoText } = languageData[lang];\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const todoItem = props.selectedTodo ? { ...props.selectedTodo, text: todoText } : { text: todoText };\r\n        props.handleSave(todoItem);\r\n        clearTodoText();\r\n    };\r\n    return (\r\n        <form\r\n            noValidate\r\n            autoComplete='off'\r\n            className={classes.root}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <TextField\r\n                value={todoText}\r\n                label={todoLabelText}\r\n                onChange={setTodoText}\r\n                autoFocus={!!props.selectedTodo}\r\n                variant={props.selectedTodo ? 'standard' : 'outlined'}\r\n            />\r\n            <Box component='span' ml={2}>\r\n                <Button type='submit' variant='contained' color='primary' disabled={!todoText}>{props.selectedTodo ? saveTodoText : addTodoText}</Button>\r\n            </Box>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React, { useState } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TodoForm from './todo-form';\r\n\r\nconst useStyles = makeStyles({\r\n    text: {\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis'\r\n    }\r\n});\r\n\r\nfunction TodoList(props) {\r\n    const classes = useStyles();\r\n    const [selectedTodo, setSelectedTodo] = useState(null);\r\n    const handleSave = item => {\r\n        setSelectedTodo(null);\r\n        props.handleSave(item);\r\n    };\r\n    return (\r\n        <List style={{ flex: 1, minHeight: 0, overflow: 'auto' }}>\r\n            {\r\n                props.todos.map(item =>\r\n                    <React.Fragment key={item.id}>\r\n                        <ListItem>\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    edge='start'\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    checked={item.completed}\r\n                                    onChange={() => props.handleCheckChange(item)}\r\n                                />\r\n                            </ListItemIcon>\r\n                            {\r\n                                selectedTodo === item ?\r\n                                    <ListItemText><TodoForm selectedTodo={selectedTodo} handleSave={handleSave} /></ListItemText> :\r\n                                    <ListItemText classes={{ primary: classes.text }} style={{ textDecoration: item.completed && 'line-through' }}>{item.text}</ListItemText>\r\n                            }\r\n                            <IconButton onClick={() => selectedTodo === item ? setSelectedTodo(null) : setSelectedTodo(item)}>\r\n                                <EditIcon />\r\n                            </IconButton>\r\n                            <IconButton edge='end' onClick={() => props.handleDelete(item)}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport TodoList from './todo-list';\r\nimport TodoForm from './todo-form';\r\nimport { ThemeContext } from './hooks/themeContext';\r\nimport useLocalStorageState from './hooks/useLocalStorageState';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        flex: 1,\r\n        minHeight: 0,\r\n        minWidth: 300,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        boxSizing: 'border-box'\r\n    }\r\n}));\r\n\r\nfunction MainContent() {\r\n    const classes = useStyles();\r\n    const [todoList, setTodoList] = useLocalStorageState('todo-list', []);\r\n    const { isDarkTheme } = useContext(ThemeContext);\r\n    const handleSave = item => {\r\n        if (item.id) {\r\n            setTodoList(todoList.map(todo => todo.id === item.id ? item : todo));\r\n        } else {\r\n            setTodoList([...todoList, { id: uuid(), text: item.text, completed: false }]);\r\n        }\r\n    };\r\n    const handleDelete = item => {\r\n        const updatedList = todoList.filter(todo => todo.id !== item.id);\r\n        setTodoList(updatedList);\r\n    };\r\n    const handleCheckChange = item => {\r\n        const updatedList = todoList.map(todo => todo.id === item.id ? { ...todo, completed: !todo.completed } : todo);\r\n        setTodoList(updatedList);\r\n    };\r\n    return (\r\n        <Box className={classes.root} paddingX={[1, 4, 16, 32, 64]} paddingY={2} bgcolor={isDarkTheme ? 'text.primary' : 'info.main'} >\r\n            <Paper className='App-paper' style={{ paddingBottom: todoList.length > 0 ? '8px' : '16px' }}>\r\n                <TodoList todos={todoList} handleSave={handleSave} handleDelete={handleDelete} handleCheckChange={handleCheckChange} />\r\n                <TodoForm handleSave={handleSave} />\r\n            </Paper>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default MainContent;","import React from 'react';\r\nimport NavBar from './nav-bar';\r\nimport MainContent from './main-content';\r\nimport { ThemeContextProvider } from './hooks/themeContext';\r\nimport { LanguageContextProvider } from './hooks/languageContext';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <NavBar />\r\n          <MainContent />\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}